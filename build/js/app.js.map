{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["/* Global App JS */\n\njQuery(document).ready(function ($) {\n\n  /**\n   * Set a cookie for the user's timezone\n   * @param timezone\n   */\n  function setTimezoneCookie(timezone) {\n    var date = new Date(2099, 1, 1);\n    document.cookie = 'timezone=' + timezone + '; path=/; expires=' + date.toUTCString();\n  }\n\n  setTimezoneCookie(jstz.determine().name());\n\n  /**\n   * Scroll page to top on refresh\n   */\n  $(window).on('beforeunload', function () {\n    $(this).scrollTop(0);\n  });\n\n  /**\n   * On load animations\n   */\n  $(window).load(function () {\n    $('header').css({height: 'auto'}).delay(100).velocity({\n      top: 0\n    }, 1000, 'easeInOutQuint');\n    $('footer').css({bottom: '-100px'}).delay(400).velocity({\n        bottom: 0\n      }, 1000, 'easeInOutQuint',\n      function () {\n        $(this).css({bottom: 'auto'});\n        $('body').css({overflowY: 'auto'});\n      });\n    $('nav').delay(1000).velocity({\n      left: 0\n    }, 1500, 'easeInOutQuint');\n  });\n\n  /**\n   * Set up the text rotator\n   */\n  $('.rotate').textillate({\n    minDisplayTime: 3000,\n    in: {effect: 'fadeInUp', shuffle: true},\n    out: {effect: 'fadeOutUp', shuffle: true},\n    loop: true\n  });\n\n  /**\n   * Set up the hover actions for the nav menu\n   */\n  $('nav').hover(navOver, navOut);\n\n  /**\n   * The action when the nav is hovered over\n   */\n  function navOver() {\n    if ($(window).outerWidth() >= 767) {\n      $('header > .container, footer').velocity({left: '100px'}, 150);\n      $('nav').addClass('active').velocity({width: '150px'}, 150);\n    }\n  }\n\n  /**\n   * The action when the nav loses hover\n   */\n  function navOut() {\n    $('header > .container, footer').velocity({left: '0px'}, 150);\n    $('nav').removeClass('active').velocity({width: '50px'}, 150);\n  }\n\n  /**\n   * Binds to clicks on nav menu items to change slides\n   */\n  $('nav a').on('click', function (event) {\n    event.preventDefault();\n    var changer = $('.lj-changer');\n    var slide = $(this).attr('href');\n    var activeSlide = $('.lj-changer > .active');\n    if (!changer.hasClass('animating') && !$(slide).is($(activeSlide))) {\n      $(changer).addClass('animating');\n      $(this).addClass('active').siblings().removeClass('active');\n      $(activeSlide).velocity({\n        opacity: 0,\n        left: '30px'\n      }, 350, 'easeInQuint', function () {\n        var selSlide = $(slide);\n        selSlide.css({opacity: '0', left: '-30px'}).addClass('active').siblings().removeClass('active');\n        onDisplaySlide(slide, selSlide);\n        $(slide).velocity({opacity: 1, left: '0px'}, 350, 'easeOutQuint', function () {\n          $(changer).removeClass('animating');\n        });\n      });\n    }\n  });\n\n  /**\n   * Called when a slide is selected for display\n   *\n   * @param selector the href value\n   * @param root the root element of the slide\n   */\n  function onDisplaySlide(selector, root) {\n    if (selector == \"#pledge\") {\n      setupPledgeSlide(root);\n    }\n    if (selector == \"#map\") {\n      setupMapSlide(root)\n    }\n  }\n\n  var pledgeRootElement;\n\n  /**\n   * Sets up bindings on the pledge slide\n   * @param root the root element of the pledge slide\n   */\n  function setupPledgeSlide(root) {\n    if (pledgeRootElement) return;\n    pledgeRootElement = root;\n\n    setupPledgeAddressAutocomplete(root);\n    setupPledgeValidation(root);\n\n    return true;\n  }\n\n  var pledgeAddressAutocomplete = null;\n  var pledgeAddressData = {};\n  var pledgeAddressElement = null;\n\n  /**\n   * Sets up the address autocompletion on the pledge slide\n   * @param root the root element of the pledge slide\n   */\n  function setupPledgeAddressAutocomplete(root) {\n    pledgeAddressElement = root.find('input[name=\"address\"]');\n\n    pledgeAddressAutocomplete = new google.maps.places.Autocomplete(pledgeAddressElement[0], {types: ['geocode']});\n    pledgeAddressAutocomplete.addListener('place_changed', updatePlaceDataFromAddress);\n\n    // try to determine user's location to bound results\n    pledgeAddressElement.bind('focus', function () {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function (position) {\n          var geolocation = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          var circle = new google.maps.Circle({\n            center: geolocation,\n            radius: position.coords.accuracy\n          });\n          pledgeAddressAutocomplete.setBounds(circle.getBounds());\n        });\n      }\n    });\n  }\n\n  /**\n   * Update the selected place data with info from the autocomplete box\n   */\n  function updatePlaceDataFromAddress() {\n    var place = pledgeAddressAutocomplete.getPlace();\n    if (place && place.geometry) {\n      // the place doesn't change until a new address is selected\n      // this makes sure the input is invalid if it doesn't match the old input\n      // for the selected place unless the place is changed all together\n      var previousId = pledgeAddressData.id;\n      var previousValue = pledgeAddressData.value;\n      var currentId = place.id;\n      var currentValue = pledgeAddressElement.val();\n      if (!previousId || !previousValue) {\n        pledgeAddressData.id = currentId;\n        pledgeAddressData.value = currentValue;\n      }\n      if (currentValue != previousValue && previousId == currentId) {\n        delete pledgeAddressData.latitude;\n        delete pledgeAddressData.longitude;\n        delete pledgeAddressData.address_components;\n      } else {\n        pledgeAddressData.id = currentId;\n        pledgeAddressData.value = currentValue;\n        pledgeAddressData.latitude = place.geometry.location.lat();\n        pledgeAddressData.longitude = place.geometry.location.lng();\n        pledgeAddressData.address_components = place.address_components;\n      }\n    }\n    validatePledgeAddressField(pledgeAddressElement)\n  }\n\n  /**\n   * Post the pledge data\n   * @param root the root of the pledge element\n   */\n  function postPledge(root) {\n    var data = {\n      _token: window.csrfToken,\n      name: root.find('input[name=\"name\"]').val(),\n      latitude: pledgeAddressData.latitude,\n      longitude: pledgeAddressData.longitude,\n      comment: root.find('textarea[name=\"comment\"]').val()\n    };\n\n    var map = {\n      street_number: {key: 'addr_street_number', name_type: 'short_name'},\n      route: {key: 'addr_route', name_type: 'long_name'},\n      locality: {key: 'addr_locality', name_type: 'long_name'},\n      administrative_area_level_2: {key: 'addr_admin_2', name_type: 'short_name'},\n      administrative_area_level_1: {key: 'addr_admin_1', name_type: 'short_name'},\n      country: {key: 'addr_country', name_type: 'short_name'},\n      postal_code: {key: 'addr_postal', name_type: 'long_name'}\n    };\n\n    // Get each component of the address from the place details\n    // and fill the corresponding data.\n    var components = pledgeAddressData.address_components;\n    for (var i = 0; i < components.length; i++) {\n      var component = components[i];\n      var type = component.types[0];\n      if (map[type]) {\n        var mapper = map[type];\n        data[mapper.key] = component[mapper.name_type];\n      }\n    }\n\n    // send the request\n    $.ajax({\n      type: \"POST\",\n      url: window.apiBase + '/pledge',\n      data: data,\n      success: onPostPledgeSuccess,\n      error: onPostPledgeError\n    });\n  }\n\n  /**\n   * Called when the pledge request has been successful\n   * @param data\n   * @param textStatus\n   * @param jqXHR\n   */\n  function onPostPledgeSuccess(data, textStatus, jqXHR) {\n    toastr.success('Thanks for your pledge!');\n    clearPledgeForm();\n    $('nav a[href=\"#map\"]').trigger('click');\n  }\n\n\n  /**\n   * Called when the pledge request has resulted in an error\n   * @param jqXHR\n   * @param textStatus\n   * @param errorThrown\n   */\n  function onPostPledgeError(jqXHR, textStatus, errorThrown) {\n    toastr.error('Failed to submit pledge. Please try again later. ' + textStatus);\n  }\n\n  /**\n   * Clears the pledge form\n   */\n  function clearPledgeForm() {\n    pledgeAddressData = {};\n    $.each(pledgeRootElement.find('input, textarea'), function(index, value) {\n      setPledgeFieldValidity($(value), null);\n      $(value).val('');\n    });\n    $.each(pledgeRootElement.find('label'), function(index, value) {\n      $(value).removeClass('active');\n    })\n  }\n\n\n  /**\n   * Sets up the input validation on the pledge slide page\n   * @param root the root element of the pledge slide\n   */\n  function setupPledgeValidation(root) {\n    // find all of the form fields\n    allFields = root.find('input, textarea');\n    allLabels = root.find('label');\n\n    // prevent form submissions\n    root.find('form').bind('submit', function (e) {\n      e.preventDefault();\n      allLabels.trigger('click');\n      allFields.trigger('click');\n\n      if ($(this).find('.valid').length == 3) {\n        postPledge(root);\n      }\n    });\n\n    // make labels listen for clicks\n    allLabels.on('click', function () {\n      if (!$(this).hasClass('active')) {\n        $(this).addClass('active');\n        $(this).next().focus();\n      }\n    });\n\n    // make all the fields as active\n    allFields.on('focus', function () {\n      $(this).prev('label').addClass('active');\n    });\n\n    // remove validity label if empty\n    allFields.on('blur', function () {\n      if (!$(this).val()) {\n        setPledgeFieldValidity($(this), null);\n      }\n    });\n\n    // validate the name field\n    root.find('input[name=\"name\"]').on('change keyup paste click', function () {\n      if (!$(this).val()) {\n        setPledgeFieldValidity($(this), false, \"Required\");\n      } else {\n        setPledgeFieldValidity($(this), true, \"Thanks \" + $(this).val() + '!');\n      }\n    });\n\n    // validate the address field\n    root.find('input[name=\"address\"]').on('change keyup paste click', function () {\n      updatePlaceDataFromAddress();\n    });\n\n    // validate the comment field\n    root.find('textarea[name=\"comment\"]').on('change keyup paste click', function () {\n      if (!$(this).val()) {\n        setPledgeFieldValidity($(this), false, \"Required\");\n      } else {\n        setPledgeFieldValidity($(this), true);\n      }\n    });\n  }\n\n  /**\n   * Validates the address field\n   * @param elem\n   */\n  function validatePledgeAddressField(elem) {\n    if (!elem.val()) {\n      setPledgeFieldValidity(elem, false, \"Required\");\n    } else {\n      if (pledgeAddressData.latitude && pledgeAddressData.longitude) {\n        var display = round(pledgeAddressData.latitude, 3) + '° ' + round(pledgeAddressData.longitude, 3) + '°';\n        setPledgeFieldValidity(elem, true, display);\n      } else {\n        setPledgeFieldValidity(elem, false, \"Invalid address\");\n      }\n    }\n  }\n\n  /**\n   * Round a number\n   * @param number\n   * @param places number of decimal places\n   * @returns {number}\n   */\n  function round(number, places) {\n    return +(Math.round(number + 'e+' + places) + 'e-' + places)\n  }\n\n  /**\n   * Set the status label on a pledge field\n   * @param field\n   * @param validity\n   * @param message\n   */\n  function setPledgeFieldValidity(field, validity, message) {\n    if (validity == null) {\n      field.removeClass('valid').prev('label').children('span').html('');\n    } else if (validity) {\n      field.addClass('valid').prev('label').children('span').html('<i class=\"fa fa-check\"></i>' + (message ? ' ' + message : ''));\n    } else {\n      field.removeClass('valid').prev('label').children('span').html('<i class=\"fa fa-close\"></i>' + (message ? ' ' + message : ''));\n    }\n  }\n\n  var mapSlideElement = false;\n\n  /**\n   * Sets up bindings on the map slide\n   * @param root the root element of the map slide\n   * @returns {boolean}\n   */\n  function setupMapSlide(root) {\n    if (mapSlideElement) return;\n    mapSlideElement = root;\n\n    var center = new google.maps.LatLng(46.8541765, -96.8985526);\n    var options = {\n      'zoom': 13,\n      'center': center,\n      'mapTypeId': google.maps.MapTypeId.HYBRID\n    };\n\n    var map = new google.maps.Map(mapSlideElement.find('#map-container')[0], options);\n\n    var markers = [];\n    //for (var i = 0; i < 100; i++) {\n    //  var latLng = new google.maps.LatLng(data.photos[i].latitude,\n    //    data.photos[i].longitude);\n    //  var marker = new google.maps.Marker({'position': latLng});\n    //  markers.push(marker);\n    //}\n    var markerCluster = new MarkerClusterer(map, markers);\n\n    // send the request\n    //$.ajax({\n    //  type: \"POST\",\n    //  url: window.apiBase + '/pledge',\n    //  data: data,\n    //  success: onPostPledgeSuccess,\n    //  error: onPostPledgeError\n    //});\n\n    return true;\n  }\n});"],"sourceRoot":"/source/"}